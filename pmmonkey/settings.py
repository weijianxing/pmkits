"""
Django settings for pmmonkey project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*x-m2blq49m0o@fjkamijf9#b@@h3ixlrm-#xf6!vjc*++@mv7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
# step 1 ython manage.py startapp my_app， step2 add my_app 配置
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pm',
    'myapp.apps.MyappConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pmmonkey.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pmmonkey.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# mysql

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'pmdb',
        'USER': 'root',
        'PASSWORD': 'root123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'sql_mode': 'traditional',
            'use_unicode': True,
        },
    }
}

# log conf
# LOGGING_DIR, = os.path.join(BASE_DIR, 'slogs')
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'standard': {
#             'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(levelname)s]'
#                       '[%(filename)s:%(lineno)d][%(message)s]',
#             'datefmt':'%Y-%m-%d %H:%M:%S'
#         },
#         'simple': {
#             'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
#         },
#     },
#     'handlers': {
#         # 'console': {
#         #     'class': 'logging.StreamHandler',
#         #     'formatter': 'console',
#         # },
# # 默认的
#         'default': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
#             'filename': os.path.join(BASE_LOG_DIR, "sandbox_info.log"),  # 日志文件
#             'maxBytes': 1024 * 1024 * 50,  # 日志大小50M
#             'backupCount': 3,  # 最多备份3个日志文件
#             'formatter': 'simple',
#             'encoding': 'utf-8',
#         },
#         # 用来记错误日志
#         'error': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切割日志文件
#             'filename': os.path.join(BASE_LOG_DIR, "sandbox_err.log"),  # 日志文件
#             'maxBytes': 1024 * 1024 * 50,  # 日志大小50M
#             'backupCount': 5,
#             'formatter': 'standard',
#             'encoding': 'utf-8',
#         }
#
#     },
#     'loggers': {
#         # 'django': {
#         #     'handlers': ['console', 'fileHandler'],
#         #     'level': 'DEBUG',
#         #     'propagate': True,  # Allow child loggers to inherit configuration
#         # },
#         # 名为sandbox_info的logger
#         'sandbox_info': {
#             'handlers': ['default'],  # 使用defaul handler
#             'level': 'DEBUG',
#             'propagate': True,  # 向不向更高级别的logger传递
#         },
#         # 名为 'sandbox_error'的logger
#         'sandbox_error': {
#             'handlers': ['error'],
#             'level': 'ERROR',
#         }
#         # 'pm': {  # Your custom app's logger
#         #     'handlers': ['console'],
#         #     'level': 'INFO',
#         # },
#     },
# }
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,  # 禁用已经存在的logger实例
#     # 日志文件的格式
#     'formatters': {
#         # 详细的日志格式
#         'standard': {
#             'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(levelname)s][%(filename)s:%(lineno)d][%(message)s]'
#         },
#         # 简单的日志格式
#         'simple': {
#             'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
#         },
#
#     },
#     # 处理器
#     'handlers': {
#         # 默认的
#         'simple': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
#             'filename': os.path.join(BASE_LOG_DIR, "sandbox_info.log"),  # 日志文件
#             'maxBytes': 1024 * 1024 * 50,  # 日志大小50M
#             'backupCount': 3,  # 最多备份3个日志文件
#             'formatter': 'simple',
#             'encoding': 'utf-8',
#         },
#         # 用来记错误日志
#         # 'error': {
#         #     'level': 'ERROR',
#         #     'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切割日志文件
#         #     'filename': os.path.join(BASE_LOG_DIR, "sandbox_err.log"),  # 日志文件
#         #     'maxBytes': 1024 * 1024 * 50,  # 日志大小50M
#         #     'backupCount': 5,
#         #     'formatter': 'standard',
#         #     'encoding': 'utf-8',
#         # }
#
#     },
#         'loggers': {
#             # 名为sandbox_info的logger
#             'sandbox_info': {
#                 'handlers': ['simple'],  # 使用defaul handler
#                 'level': 'INFO',
#                 'propagate': True,  # 向不向更高级别的logger传递
#             },
#             # 名为 'sandbox_error'的logger
#             # 'sandbox_error': {
#             #             #     'handlers': ['error'],
#             #             #     'level': 'ERROR',
#             #             # }
#     }
#
# }

#
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Optional, avoid overriding default loggers

    'formatters': {
        'simple': {
            'format': '[%(asctime)s][%(levelname)s][%(filename)s:%(lineno)d][%(message)s]'
        }
    },

    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
'       simple': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        }
    },

    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,  # Optional, allows child loggers to inherit settings
        },
    },
}


#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'standard': {
#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'
#         },
#         'simple': {
#             'format': '[%(levelname)s]> %(message)s',
#             'datefmt': '%Y-%m-%d %H:%M:%S'
#         },
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple'
#         },
#         'file_handler': {
#              'level': 'INFO',
#              'class': 'logging.handlers.TimedRotatingFileHandler',
#              'filename': '%s/django.log' % LOGGING_DIR,
#              'formatter':'standard',
#              'encoding': 'utf-8'
#         }, # 用于文件输出
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#              'formatter':'standard'
#         },
#     },
#     'loggers': {
#         'django': {
#             # 一个记录器中可以使用多个处理器
#             'handlers': ['console','file_handler'],
#             'level':'DEBUG',
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['mail_admins'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#     }
# }
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
